/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import model.Encounter;
import model.Patient;
import model.Person;
import model.Person_directory;
import model.Vitals;

/**
 *
 * @author RaghavGoswami
 */
public class VitalSign extends javax.swing.JPanel {

    /**
     * Creates new form VitalSign
     */
   
     Person person;
     Encounter en1;
     Patient patient;
     Person_directory person_directory;
     JPanel userProcessor;
     Vitals vitals;
     DefaultTableModel model;
     ArrayList<Person> personDetails;
     
   
    public VitalSign(JPanel userProcessor,Patient patient , Person_directory person_directory) {
        
        this.patient = patient;
        this.userProcessor= userProcessor;
        this.person_directory= person_directory;
        personDetails = person_directory.getPerson_directory();
        this.en1 = new Encounter();
        initComponents();
        populatePatientsTable(personDetails);
        populateVitalSignTable(personDetails);
        panel.setVisible(false);
       
    }
    
    private void populatePatientsTable(ArrayList<Person> personDetails) {
        DefaultTableModel model = (DefaultTableModel) vitalstbl.getModel();
        model.setRowCount(0);
        if(personDetails.isEmpty())
        {
            JOptionPane.showMessageDialog(this, "No Person's found. Please add"
                    + " Person's", "Warning", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        
        for(Person person : personDetails) {
            Object[] row = new Object[10];
            row[0] = person;
            row[1]=  person.getAge();
            row[2] = person.getContactno();
            row[3] = person.getZipcode();
            row[4] = person.getCommunity();
            row[5] = person.getHouse();
            row[6] = person.getCity();
            
          //  row[7] = vitals.getBlood_pressure();
            if(person.getPatient()!=null)
            {
                row[7] = person.getPatient().getAvail();
            }
            else
            {
                row[7] = "Not a Patient";
            }
            if(person.getPatient()!=null)
            {
                row[8] = person.getPatient().getDoctorName();
            }
            else
            {
                row[8] = "Not Assigned";
            }

            
            model.addRow(row);
            
        
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        vitalstbl = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        btndisplay2 = new javax.swing.JButton();
        btndisplay1 = new javax.swing.JButton();
        panel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbl3 = new javax.swing.JTable();

        setBackground(new java.awt.Color(204, 204, 255));

        vitalstbl.setBackground(new java.awt.Color(102, 102, 102));
        vitalstbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Name", "Age", "Contact No", "Zipcode", "Community", "House", "City", "Patient_Ref", "Doctor Name"
            }
        ));
        jScrollPane1.setViewportView(vitalstbl);

        jButton2.setText("Enter Blood Pressure");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton4.setText("View Report");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton3.setText("Back");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        btndisplay2.setText("Display abnormal for Americans");
        btndisplay2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btndisplay2ActionPerformed(evt);
            }
        });

        btndisplay1.setText("Display abnormal for Asians");
        btndisplay1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btndisplay1ActionPerformed(evt);
            }
        });

        panel.setBackground(new java.awt.Color(255, 204, 204));

        tbl3.setBackground(new java.awt.Color(255, 255, 204));
        tbl3.setBorder(new javax.swing.border.MatteBorder(null));
        tbl3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Ref_No", "Community", "Blood_Pressure", "Report", "Timestamp"
            }
        ));
        jScrollPane2.setViewportView(tbl3);

        javax.swing.GroupLayout panelLayout = new javax.swing.GroupLayout(panel);
        panel.setLayout(panelLayout);
        panelLayout.setHorizontalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 613, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(38, Short.MAX_VALUE))
        );
        panelLayout.setVerticalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelLayout.createSequentialGroup()
                .addGap(0, 45, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 687, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton3)
                        .addGap(164, 164, 164)
                        .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 234, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btndisplay1))
                    .addComponent(panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(485, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btndisplay2)
                .addGap(285, 285, 285))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btndisplay1, btndisplay2, jButton2, jButton4});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btndisplay1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btndisplay2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(453, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btndisplay1, btndisplay2, jButton2});

    }// </editor-fold>//GEN-END:initComponents
    
  
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        panel.setVisible(true);
        populateVitalSignTable(personDetails);

    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        int selectedRow = vitalstbl.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row from table.",
                    "Error", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        Person person = (Person) vitalstbl.getValueAt(selectedRow, 0);
        Patient patient= person.getPatient();
        if(patient!=null)
        {
                Report r  = new Report(userProcessor,patient);
                userProcessor.add("r", r);
                CardLayout layout = (CardLayout) userProcessor.getLayout();
                layout.next(userProcessor);
        }
        else
        {
            JOptionPane.showMessageDialog(this, "Patient not created, Please create"
                    + " Patient first.", "Error", JOptionPane.ERROR_MESSAGE);
        }
               
            //    populateVitalSignTable(person);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        userProcessor.remove(this);
        CardLayout layout = (CardLayout) userProcessor.getLayout();
        layout.previous(userProcessor);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void btndisplay2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btndisplay2ActionPerformed
        // TODO add your handling code here:
        
        
        ArrayList<RowFilter<Object,Object>> filters = new ArrayList<RowFilter<Object,Object>>(2);
        filters.add(RowFilter.regexFilter("Abnormal"));
        filters.add(RowFilter.regexFilter("American"));
        RowFilter<Object,Object> abcom = RowFilter.andFilter(filters);
        model = (DefaultTableModel) tbl3.getModel();
        TableRowSorter<DefaultTableModel> trs = new TableRowSorter<>(model);
        tbl3.setRowSorter(trs);
        trs.setRowFilter(abcom);
    }//GEN-LAST:event_btndisplay2ActionPerformed

    private void btndisplay1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btndisplay1ActionPerformed
        // TODO add your handling code here:
        ArrayList<RowFilter<Object,Object>> filters = new ArrayList<RowFilter<Object,Object>>(2);
        filters.add(RowFilter.regexFilter("Abnormal"));
        filters.add(RowFilter.regexFilter("Asian"));
        RowFilter<Object,Object> abcom = RowFilter.andFilter(filters);
        model = (DefaultTableModel) tbl3.getModel();
        TableRowSorter<DefaultTableModel> trs = new TableRowSorter<>(model);
        tbl3.setRowSorter(trs);
        trs.setRowFilter(abcom);
        
    }//GEN-LAST:event_btndisplay1ActionPerformed
private void checkbycomm2(String comm2)
            {
    }
    private void checkbycomm(String comm)
            {
//        String comm = commcmbbx.getSelectedItem().toString();
        //String ref = patidtf.getText();
        
        model = (DefaultTableModel) vitalstbl.getModel();
        TableRowSorter<DefaultTableModel> trs = new TableRowSorter<>(model);
        tbl3.setRowSorter(trs);
        trs.setRowFilter(RowFilter.regexFilter(comm));
    }
    private void populateVitalSignTable(ArrayList<Person> personDetails) {
        
        DefaultTableModel model = (DefaultTableModel) tbl3.getModel();
        model.setRowCount(0);
       
        for(Person person: personDetails) {
            if (person != null) {
            int patientAge = person.getAge();
            
            ArrayList<Vitals> vitalDetails = person.getPatient().getEncounter().getEncounterhistory();
            
//            if (vitalDetails.isEmpty()) {
//                 JOptionPane.showMessageDialog(this, "No vital signs found. Please"
//                        + " add vital signs", "Error", JOptionPane.INFORMATION_MESSAGE);
//                return;
//            }
            
            for (Vitals vitalSign : vitalDetails) {
               
                Object[] row = new Object[5];
                row[0] = person.getPatient().getAvail();
                row[1] = person.getCommunity();
                row[2] = vitalSign.getBlood_pressure();
                row[3] = VitalSignStatus(patientAge, vitalSign);
                row[4] = vitalSign;
                
                model.addRow(row);
            }
        }

        }
        
            }
    
    private String VitalSignStatus(int patientAge, Vitals vitalSign) {
        String vitalSignStatus = "Normal";
        
        
       // int heartRate = vitalSign.getHeart_rate();
        int bloodPressure = vitalSign.getBlood_pressure();
        
        
        /*Toddler*/
        //if(bloodPressure < 80 || bloodPressure > 110)
       // {
          if (patientAge >= 1 && patientAge <= 12) {
             if((bloodPressure < 80 || bloodPressure > 110)){
                 vitalSignStatus = "Abnormal";
            }
            
          }
        

//        /*Adolescent*/
        if (patientAge >= 13) {
            if ((bloodPressure < 110 || bloodPressure > 120)) {
                vitalSignStatus = "Abnormal";
            }
        }
        return vitalSignStatus;
    }
        

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btndisplay1;
    private javax.swing.JButton btndisplay2;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel panel;
    private javax.swing.JTable tbl3;
    public javax.swing.JTable vitalstbl;
    // End of variables declaration//GEN-END:variables
}

   

